extend type Query {
    salon(id: ID! ): Salon
    firstSalon: Salon
    allSalons: [Salon]
}

enum AccessType {
    METRO
    BUS
    ROAD
    PLACE
    RER
    TRAIN STATION
    PARKING
    SHOPPING MALL
    STREETCAR
}

enum SalonTypeCategory {
    INDEPENDENT
    SERIES
}

enum ExploitationType {
    OWNER
    FRANCHISE
}

enum SalonStatus {
  CREATED
  PUBLIC
  PRIVATE
  NOT_ENROLLED
  DISABLED
}

type PartnerRef @key(fields: "id") {
    id: ID!
    name: String!
}

type GeoPoint {
    lat: Float
    lng: Float
}

type Tax {
    id: ID!
    countryCode: String
    vatNumber: String
    taxRate: Int
}

type Fees {
    id: ID!
    commission: Int
    percentFees: Int
    statedFees: Int
}

type Access {
    type: AccessType
    name: String
}

type Address {
    id: ID!
    address: String
    city: String
    zipCode: String
}

type SalonType {
    category: SalonTypeCategory
    name: String
    exploitation: ExploitationType
    exploitationNumber: String
}

"Salon definition"
type Salon @key(fields: "id") {
    id: ID!

    partnerRefs: [PartnerRef]
    geoLocation: GeoPoint
    tax: Tax
    fees: Fees
    access: [Access]
    address: Address
    billingAddress: Address
    type: SalonType


    status: SalonStatus

    name: String!
    logo: String
    backgrounds: [String]
    timezone: String
    carouselImages: [String]

    adwordsCampaignId: String
    adwordsSync: Boolean
    email: String
    slug: String
    description: String
    phone: String
    mobile: String
    companyName: String
    salonCode: String
    siret: String
    iban: String
    recommendation: String
    commission: Int 
    dateAcceptedGCU: String
}

input InputSalon {
    name: String!
    logo: String
    status: SalonStatus
    email: String
}

input InputAddress {
    address: String!
    city: String
    zipCode: String
}

type Mutation {
  createSalon(salon: InputSalon!, address: InputAddress): Salon
}